#!/bin/bash
set -- $SSH_ORIGINAL_COMMAND

cmd=$1
dest=$2
maxdaily=5
keepdaily=1
today=$(date +%Y%m%d)

snapshot=.snapshot
current=current
new=new

for i in {0..7}; do ((keep[$(date +%Y%m%d -d "-$i day")]++)); done

if [ -z "$dest" ]; then
  echo "sorry, you must provide a destination as second argument"
  exit 1
fi

gc() {
  store=$1
  if [ -e $store/$snapshot-$new ]; then
    last=$(date +%Y%m%d%H%M%S -d @$(stat -c %Z $store/$snapshot-$current))
    if [ -e $store/$snapshot-$last ]; then
      echo "preexisting $store/$snapshot-$last, removing first"
      btrfs subvolume delete $store/$snapshot-$last
    fi
    echo "move $store/$snapshot-$current to $store/$snapshot-$last"
    mv $store/$snapshot-$current $store/$snapshot-$last

    echo "moving new remote backup $store/$snapshot-$new to $store/$snapshot-$current..."
    mv $store/$snapshot-$new $store/$snapshot-$current

    echo "cleaning out old daily snapshots"
    for snap in $((ls -da $store/$snapshot-$today* || true) | sort -r | tail -n +$((maxdaily+1))); do
      echo "removing old daily snapshot: '$snap'"
      echo "btrfs subvolume delete $snap"
      btrfs subvolume delete $snap
    done

    echo "cleaning out snapshots older than today, keeping a weeks worth ($keepdaily per day)"
    for snap in $((ls -da $store/$snapshot-2* || true) | sort -r); do
      name=$(basename $snap)
      when=$(echo $name | sed "s|$snapshot-||g")
      day=$(echo $when | cut -c1-8)
      if [ "$day" = "$today" ]; then
        echo "skip $snap (today)"
        continue
      fi
      k=${keep[$day]}
      if [ "$k" != "1" ]; then
        echo "removing snap older than a week: $snap"
        echo "btrfs subvolume delete $snap"
        btrfs subvolume delete $snap
      else
        for dailysnap in $((ls -da $store/$snapshot-$day* || true) | sort -r | tail -n +$((keepdaily+1))); do
          echo "remove old snap $dailysnap (keeping one per day)"
          echo "btrfs subvolume delete $dailysnap"
          btrfs subvolume delete $dailysnap
        done
      fi
    done
  fi
}

receive() {
  store=$1
  if [ -e $store/$snapshot-$new ]; then
    echo "preexisting $store/$snapshot-$new, removing before receiving..."
    btrfs subvolume delete $store/$snapshot-$new
  fi
  echo "btrfs receive \"$store\""
  if ! btrfs receive "$store"; then
    echo >&2 "error receiving snapshot"
    exit 1
  fi
  sync
  gc $store
}

exists() {
  store=$1
  if test -e "$store" && test -e "$store/$snapshot-$current"; then
    echo "$store and $store/$snapshot-$current exist"
    exit 0
  else
    echo "$store and $store/$snapshot-$current do not exist"
    exit 1
  fi
}

check() {
  echo "ok"
  exit 0
}

setup() {
  store=$1
  echo "setting up backup '$store'"
  echo "mkdir -p \"$(dirname $store)\""
  mkdir -p "$(dirname $store)"
  echo "btrfs subvolume create \"$store\""
  btrfs subvolume create "$store" || true
  exit 0
}

nocommand() {
  echo >&2 "sorry only receive, exists, check and setup commands are allowed - they all take the destination path"
  exit 1
}

case "$cmd" in
  receive)
    receive $dest
    ;;
  setup)
    setup $dest
    ;;
  exists)
    exists $dest
    ;;
  check)
    check $dest
    ;;
  *)
    nocommand $dest
    ;;
esac
